{"version":3,"sources":["containers/App.module.css","components/Counter/Counter.module.css","components/Counter/Counter.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","props","className","classes","container","input","type","min","max","value","counter","onChange","changed","onWheel","App","state","counterValue","counterChangeStep","minValue","maxValue","data","appTitle","info","author","changeHandler","target","Number","length","setState","buttonClickHandler","id","prevState","nextValue","App__title","this","button","button_substraction","onClick","button_addition","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAa,wBAAwB,UAAY,uBAAuB,OAAS,oBAAoB,gBAAkB,6BAA6B,oBAAsB,mC,gBCAnND,EAAOC,QAAU,CAAC,MAAQ,yB,yMCqBXC,EAlBC,SAACC,GAGf,OACE,yBAAKC,UAAWC,IAAQC,WACtB,2BACEF,UAAWC,IAAQE,MACnBC,KAAK,SACLC,IAAKN,EAAMM,IACXC,IAAKP,EAAMO,IACXC,MAAOR,EAAMS,QACbC,SAAUV,EAAMW,QAChBC,QAXe,iBCwFRC,E,4MAtFbC,MAAQ,CACNC,aAAc,EACdC,kBAAmB,EACnBC,SAAU,EACVC,SAAU,IAEVC,KAAM,CACJC,SAAU,cACVC,KAAM,yBACNC,OAAQ,gC,EAIZC,cAAgB,YAA4B,IAAff,EAAc,EAAxBgB,OAAUhB,MACvBiB,OAAOjB,IAAU,EAAKM,MAAMG,WAAaT,EAAMkB,OACjD,EAAKC,SAAS,CACZZ,aAAc,EAAKD,MAAMG,WAElBQ,OAAOjB,IAAU,EAAKM,MAAMI,SACrC,EAAKS,SAAS,CACZZ,aAAc,EAAKD,MAAMI,WAG3B,EAAKS,SAAS,CAAEZ,aAAcU,OAAOjB,M,EAIzCoB,mBAAqB,YACR,UADgC,EAArBJ,OAAUK,GAE9B,EAAKF,UAAS,SAACG,GACb,IAAMC,EAAYN,OAAOK,EAAUf,cAAgB,EAAKD,MAAME,kBAE9D,OAAIe,GAAa,EAAKjB,MAAMG,SACnB,CACLF,aAAc,EAAKD,MAAMG,UAGpB,CACLF,aAAcgB,MAKpB,EAAKJ,UAAS,SAACG,GACb,IAAMC,EAAYN,OAAOK,EAAUf,cAAgB,EAAKD,MAAME,kBAE9D,OAAIe,GAAa,EAAKjB,MAAMI,SACnB,CACLH,aAAc,EAAKD,MAAMI,UAGpB,CACLH,aAAcgB,O,uDAQtB,OACE,yBAAK9B,UAAWC,IAAQW,KACtB,wBAAIZ,UAAWC,IAAQ8B,YAAaC,KAAKnB,MAAMK,KAAKC,UAEpD,yBAAKnB,UAAWC,IAAQC,WACtB,4BAAQ0B,GAAG,QAAQ5B,UAAS,UAAKC,IAAQgC,OAAb,YAAuBhC,IAAQiC,qBAAuBC,QAASH,KAAKL,oBAAhG,KAEA,kBAAC,EAAD,CACEtB,IAAK2B,KAAKnB,MAAMG,SAChBV,IAAK0B,KAAKnB,MAAMI,SAChBT,QAASwB,KAAKnB,MAAMC,aACpBJ,QAASsB,KAAKV,gBAGhB,4BAAQM,GAAG,OAAO5B,UAAS,UAAKC,IAAQgC,OAAb,YAAuBhC,IAAQmC,iBAAmBD,QAASH,KAAKL,oBAA3F,MAGF,2BACGK,KAAKnB,MAAMK,KAAKE,KADnB,OAC4B,uBAAGiB,KAAML,KAAKnB,MAAMK,KAAKG,OAAQE,OAAO,SAAxC,uB,GA/ElBe,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fc1a3139.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1IQbR\",\"App__title\":\"App_App__title__2LdCO\",\"container\":\"App_container__3D-uq\",\"button\":\"App_button__2U19n\",\"button_addition\":\"App_button_addition__3OCUH\",\"button_substraction\":\"App_button_substraction__3PfZb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Counter_input__1z1c5\"};","import React from 'react';\n\nimport classes from './Counter.module.css';\n\nconst Counter = (props) => {\n  const wheelHandler = () => {};\n\n  return (\n    <div className={classes.container}>\n      <input\n        className={classes.input}\n        type=\"number\"\n        min={props.min}\n        max={props.max}\n        value={props.counter}\n        onChange={props.changed}\n        onWheel={wheelHandler}\n      />\n    </div>\n  );\n};\n\nexport default Counter;","import React, { Component } from 'react';\n\nimport classes from './App.module.css';\nimport Counter from '../components/Counter/Counter';\n\n\nclass App extends Component {\n  state = {\n    counterValue: 1,\n    counterChangeStep: 1,\n    minValue: 1,\n    maxValue: 100,\n\n    data: {\n      appTitle: 'Counter App',\n      info: 'Test task for DomClick',\n      author: 'https://github.com/TeemourA'\n    }\n  }\n\n  changeHandler = ({ target: { value } }) => {\n    if (Number(value) <= this.state.minValue || !value.length) {\n      this.setState({\n        counterValue: this.state.minValue,\n      });\n    } else if (Number(value) >= this.state.maxValue) {\n      this.setState({\n        counterValue: this.state.maxValue,\n      });\n    } else {\n      this.setState({ counterValue: Number(value) });\n    }\n  }\n\n  buttonClickHandler = ({ target: { id } }) => {\n    if (id === 'minus') {\n      this.setState((prevState) => {\n        const nextValue = Number(prevState.counterValue) - this.state.counterChangeStep;\n\n        if (nextValue <= this.state.minValue) {\n          return {\n            counterValue: this.state.minValue,\n          };\n        } else {\n          return {\n            counterValue: nextValue,\n          };\n        }\n      });\n    } else {\n      this.setState((prevState) => {\n        const nextValue = Number(prevState.counterValue) + this.state.counterChangeStep;\n\n        if (nextValue >= this.state.maxValue) {\n          return {\n            counterValue: this.state.maxValue,\n          };\n        } else {\n          return {\n            counterValue: nextValue,\n          };\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className={classes.App}>\n        <h1 className={classes.App__title}>{this.state.data.appTitle}</h1>\n\n        <div className={classes.container}>\n          <button id=\"minus\" className={`${classes.button} ${classes.button_substraction}`} onClick={this.buttonClickHandler}>-</button>\n\n          <Counter\n            min={this.state.minValue}\n            max={this.state.maxValue}\n            counter={this.state.counterValue}\n            changed={this.changeHandler}\n          />\n\n          <button id=\"plus\" className={`${classes.button} ${classes.button_addition}`} onClick={this.buttonClickHandler}>+</button>\n        </div>\n\n        <p>\n          {this.state.data.info} by <a href={this.state.data.author} target=\"blank\">Timur Ahmedov</a>\n        </p>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}